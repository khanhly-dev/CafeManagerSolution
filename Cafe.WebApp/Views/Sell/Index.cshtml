@model Cafe.ViewModel.Catalog.Sell.SellRequest.SellBillCreateRequest
@using Cafe.WebApp.Services.Sell
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var data = ViewData["data"] as List<Cafe.ViewModel.Catalog.Sell.SellRequest.ListProductInSellRequest>;
    var comboboxData = ViewData["combobox"] as List<Cafe.ViewModel.Catalog.Product.ProductRequest.GetNameRequest>;
}



@*<style>
        .custom-combobox {
            position: relative;
            display: inline-block;
            margin-left: 20px;
            margin-top: 7px;
        }

        .custom-combobox-toggle {
            position: absolute;
            top: 0;
            bottom: 0;
            margin-left: -1px;
            padding: 0;
        }

        .custom-combobox-input {
            margin: 0;
            padding: 5px 10px;
            width: 700px;
        }
</style>*@
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    $(function () {
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                    .addClass("custom-combobox")
                    .insertAfter(this.element);

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                    value = selected.val() ? selected.text() : "";

                this.input = $("<input>")
                    .appendTo(this.wrapper)
                    .val(value)
                    .attr("title", "")
                    .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                    .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: $.proxy(this, "_source")
                    })
                    .tooltip({
                        classes: {
                            "ui-tooltip": "ui-state-highlight"
                        }
                    });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            _createShowAllButton: function () {
                var input = this.input,
                    wasOpen = false;

                $("<a>")
                    .attr("tabIndex", -1)
                    .attr("title", "Show All Items")
                    .tooltip()
                    .appendTo(this.wrapper)
                    .button({
                        icons: {
                            primary: "ui-icon-triangle-1-s"
                        },
                        text: false
                    })
                    .removeClass("ui-corner-all")
                    .addClass("custom-combobox-toggle ui-corner-right")
                    .on("mousedown", function () {
                        wasOpen = input.autocomplete("widget").is(":visible");
                    })
                    .on("click", function () {
                        input.trigger("focus");

                        // Close if already visible
                        if (wasOpen) {
                            return;
                        }

                        // Pass empty string as value to search for, displaying all results
                        input.autocomplete("search", "");
                    });
            },

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {

                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                    valueLowerCase = value.toLowerCase(),
                    valid = false;
                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                    .val("")
                    .attr("title", value + " didn't match any item")
                    .tooltip("open");
                this.element.val("");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.autocomplete("instance").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });

        $("#combobox").combobox();
        $("#toggle").on("click", function () {
            $("#combobox").toggle();
        });
    });
</script>
@*autocomplete seach link and script*@




<div class="bill-div">
    @*<form class="seach-div ui-widget" asp-action="Index" method="get">
            <input type="text" id="seach-input" class="biginput" placeholder="Tìm kiếm" name="SellBillId">
            <select id="seach-input combobox" class="biginput">
                @foreach (var item in comboboxData)
                {
                    <option>@item.Name + @item.Price</option>
                }
            </select>

            <button class="seach-icon" id="toggle" type="submit">
                <i class="fas fa-plus"></i>
            </button>
        </form>*@


    <form class="ui-widget">
        <label id="add-lb">Thêm:</label>
        <select id="combobox">
            @foreach (var item in comboboxData)
            {
                <option>@item.Name + @item.Price</option>
            }
        </select>
        <button class="seach-icon" type="submit">
            <i class="fas fa-plus"></i>
        </button>
    </form>

    <table class="list-product">
        <thead>
            <tr>
                <th>
                </th>
                <th id="product-item">
                    Đồ uống

                </th>
                <th id="price-item">
                    Giá
                </th>
                <th id="quantity-item">
                    Số lượng

                </th>
                <th id="total-money-item">
                    Tổng tiền

                </th>
                <th id="discount-item">
                    Giảm giá

                </th>
                <th id="money-item">
                    Thành tiền

                </th>
            </tr>
        </thead>



        @foreach (var item in data)
        {
            <tr>
                <td>
                    <button>
                        <i class="fas fa-times"></i>
                    </button>
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.OriginalPrice)
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.Discout)
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.TotalPrice)
                </td>
                <td class="td-body">
                    @Html.DisplayFor(modelItem => item.SellBillId)
                </td>
            </tr>
        }



    </table>

</div>

<div class="pay-div">
    <div class="user-div">
        <i class="fas fa-user"></i>
        <input asp-for="UserCreated" name="UserCreated">
        <input asp-for="DateCreated" class="date-created" type="datetime-local" name="DateCreated">
    </div>
    <form class="customer-div">
        <input type="text" id="customer-seach-input" placeholder="Tìm kiếm khách hàng" asp-for="CustomerId" name="CustomerId">
        <button class="customer-seach-icon">
            <i class="fas fa-plus"></i>
        </button>
    </form>

    <div class="product-div">
        <button class="product-btn">
            <i class="fas fa-search"></i>
            Bảng giá
        </button>
    </div>

    <form asp-action="Index" enctype="multipart/form-data" method="post">
        <div class="info-pay-div">
            <label asp-for="UserCreated">Thu ngân:</label>
            <input asp-for="UserCreated" class="info-pay-input" type="text" name="UserCreated" value="admin">
        </div>
        <div class="info-pay-div">
            <label asp-for="CustomerId">Khách hàng:</label>
            <input asp-for="CustomerId" class="info-pay-input" type="text" name="CustomerId">
        </div>
        <div class="info-pay-div">
            <label asp-for="DateCreated">Thời gian:</label>
            <input asp-for="DateCreated" class="info-pay-input" type="datetime-local" name="DateCreated" placeholder="tìm kiếm khách hàng">
        </div>


        <div class="info-pay-div">
            <label asp-for="SellBillId">Số HĐ:</label>
            <input asp-for="SellBillId" class="info-pay-input" type="text" name="SellBillId">
        </div>
        <div class="info-pay-div">
            <label asp-for="OriginalPrice">Tổng tiền:</label>
            <input asp-for="OriginalPrice" class="info-pay-input" type="text" name="OriginalPrice">
        </div>
        <div class="info-pay-div">
            <label asp-for="Discout">giảm giá:</label>
            <input asp-for="Discout" class="info-pay-input" type="text" name="Discout">
        </div>
        <div class="info-pay-div">
            <label asp-for="TotalPrice">Thành tiền:</label>
            <input asp-for="TotalPrice" class="info-pay-input" type="text" name="TotalPrice">
        </div>
        <div class="info-pay-div">
            <label asp-for="Pay">Khách trả:</label>
            <input asp-for="Pay" class="info-pay-input" type="text" name="Pay">
        </div>
        <div class="info-pay-div">
            <label asp-for="PayBack">Trả lại:</label>
            <input asp-for="PayBack" class="info-pay-input" type="text" name="PayBack">
        </div>
        <div class="info-pay-div">
            <input asp-for="Note" class="note-pay-input" type="text" placeholder="Ghi chú" name="Note">
        </div>

        <div class="payment-div"></div>
        <button class="print-btn">
            In hóa đơn
        </button>
        <button class="pay-btn" type="submit">
            Thanh toán
        </button>

    </form>
</div>




@*demo ajax*@

@*<script type="text/javascript">




        var Manager = {
            GetAllProduct: function () {
                var listNameArray = new Array();
                var obj = "";
                var serviceUrl = "https://localhost:5001/api/sell/getname";
                window.Manager.GetApi(serviceUrl, onSuccess, onFailed);
                function onSuccess(jsonData) {
                    obj = jsonData;
                    $.each(jsonData, function (i, item) {
                        listNameArray[i] = item.name.toString();
                    });
                    console.log("listNameArray", listNameArray)

                }
                function onFailed(error) {
                    window.alert(error.statusText);
                }
                return listNameArray
            },

            GetApi: function (serviceUrl, successCallBack, errorCallBack) {
                $.ajax({
                    type: "GET",
                    url: serviceUrl,
                    dataType: "json",
                    success: successCallBack,
                    error: errorCallBack
                });
            }
        }

        $(document).ready(async function () {
            var listNameArray = new Array();
            listNameArray = await Manager.GetAllProduct();
            console.log(listNameArray)
            $('#seach-input').autocomplete({
                lookup: listNameArray
            });
        })
    </script>*@



